from scapy.all import sniff, IP, TCP, UDP

def packet_callback(packet):
    # Check if the packet has IP layer
    if IP in packet:
        ip_layer = packet[IP]
        src_ip = ip_layer.src
        dst_ip = ip_layer.dst
        proto = ip_layer.proto
        
        # Initialize protocol name
        proto_name = "Other"
        
        # Check for specific protocols
        if proto == 6:  # TCP
            proto_name = "TCP"
            if TCP in packet:
                tcp_layer = packet[TCP]
                src_port = tcp_layer.sport
                dst_port = tcp_layer.dport
                payload = bytes(tcp_layer.payload)
        elif proto == 17:  # UDP
            proto_name = "UDP"
            if UDP in packet:
                udp_layer = packet[UDP]
                src_port = udp_layer.sport
                dst_port = udp_layer.dport
                payload = bytes(udp_layer.payload)
        else:
            src_port = "N/A"
            dst_port = "N/A"
            payload = bytes(ip_layer.payload)
        
        print(f"Source IP: {src_ip}")
        print(f"Destination IP: {dst_ip}")
        print(f"Protocol: {proto_name}")
        print(f"Source Port: {src_port}")
        print(f"Destination Port: {dst_port}")
        print(f"Payload: {payload}")
        print("-" * 50)

def main():
    print("Starting packet sniffer...")
    # Sniff packets indefinitely
    sniff(prn=packet_callback, store=0)

if __name__ == "__main__":
    main()
